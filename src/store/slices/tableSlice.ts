// Import necessary constants and functions from libraries

import { createSlice, PayloadAction } from '@reduxjs/toolkit';

// Define the type for the table properties
type TableProps = {
	page: number; // The current page
	limit: number; // The limit of items per page
	search?: string; // The search query
	sort: string; // The sorting order
	skip: number; // The number of items to skip
	docsInPage?: number; // The number of documents in the current page
	totalDocs?: number; // The total number of documents
	totalPages?: number; // The total number of pages
	filters?: any; // The applied filters
	unitFilters?: any; // The unit filters
	fields?: string[]; // The fields to be returned
	selected?: string[]; // The selected items
	preferences?: string[]; // The preferences
	selectedItems: any[]; // The selected items
};

// Define the type for the update properties
type UpdateProps = {
	page?: number; // The new page
	limit?: number; // The new limit
	search?: string; // The new search query
	sort?: string; // The new sorting order
};

// Define the type for the filter payload
type FilterPayload = any;

// Define the initial state of the table
const initialState: TableProps = {
	page: 1, // Default page is 1
	limit: 10, // Default limit is BASE_LIMIT
	sort: '-createdAt', // Default sorting order is '-createdAt'
	skip: 0, // Default skip is 0
	filters: {}, // Default filters is an empty object
	preferences: [], // Default preferences is an empty array
	fields: [], // Default fields is an empty array
	selectedItems: [], // Default selected is an empty array
};
export const tableSlice = createSlice({
	name: 'table', // Name of the slice
	initialState, // Initial state
	reducers: {
		// Define a reducer for updating the table
		updateTable: (state, action: PayloadAction<UpdateProps>) => {
			if (
				action.payload.page !== state.page ||
				action.payload.search !== state.search ||
				action.payload.sort !== state.sort
			) {
				state.selectedItems = [];
			}
			// Update the state with the new properties
			state.page = action.payload.page || state.page;
			state.limit = action.payload.limit || state.limit;
			state.search = action.payload.search || state.search;
			state.sort = action.payload.sort || state.sort;
		},
		updateSearch: (state, action: PayloadAction<string>) => {
			// Update the state with the new properties
			state.search = action.payload;
			state.selectedItems = [];
		},
		// Define a reducer for applying filters
		applyFilters: (state, action: PayloadAction<FilterPayload>) => {
			// Apply the filters to the state
			const { key, value } = action.payload;
			for (const key in state.filters) {
				if (key.startsWith(action.payload.key)) {
					delete state.filters[key];
				}
			}
			state.filters[key] = value;
			state.selectedItems = [];
		},
		// Define a reducer for clearing filters
		clearFilters: state => {
			// Clear the filters in the state
			state.filters = {};
			state.selectedItems = [];
		},
		// Define a reducer for refreshing the table
		refresh: state => {
			// Reset the state to the initial state
			state.page = 1;
			state.search = '';
			state.limit = 10;
			state.sort = '-createdAt';
			state.filters = {};
			state.selectedItems = [];
		},

		setFields: (state, action: PayloadAction<any>) => {
			//const { fields = [], preferences = [] } = action.payload;
			//const fields = action?.payload?.fields || [];

			state.fields = action.payload;
			//state.preferences = preferences;
		},
		setPreferences: (state, action: PayloadAction<any>) => {
			state.preferences = action.payload;
		},
		selectItem: (state, action: PayloadAction<{ id: string; isSelected?: boolean }>) => {
			const { id, isSelected = true } = action.payload;
			if (isSelected) {
				state.selectedItems.push(id);
			} else {
				state.selectedItems = state.selectedItems.filter(item => item !== id);
			}
		},
		selectAll: (state, action: PayloadAction<{ ids: string[]; isSelected?: boolean }>) => {
			const { ids, isSelected = true } = action.payload;
			if (isSelected) {
				state.selectedItems = ids;
			} else {
				state.selectedItems = [];
			}
		},
		unselectAll: state => {
			state.selectedItems = [];
		},
	},
});

// Export the actions generated by createSlice
export const {
	refresh,
	updateTable,
	applyFilters,
	clearFilters,
	setFields,
	setPreferences,
	updateSearch,
	selectItem,
	selectAll,
	unselectAll,
} = tableSlice.actions;

// Export the reducer
export default tableSlice.reducer;
